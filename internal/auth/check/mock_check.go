// Code generated by MockGen. DO NOT EDIT.
// Source: check.go

// Package check is a generated GoMock package.
package check

import (
	context "context"
	reflect "reflect"
	telegram "tgavatar/internal/telegram"

	gomock "github.com/golang/mock/gomock"
	auth "github.com/gotd/td/telegram/auth"
)

// Mockclient is a mock of client interface.
type Mockclient struct {
	ctrl     *gomock.Controller
	recorder *MockclientMockRecorder
}

// MockclientMockRecorder is the mock recorder for Mockclient.
type MockclientMockRecorder struct {
	mock *Mockclient
}

// NewMockclient creates a new mock instance.
func NewMockclient(ctrl *gomock.Controller) *Mockclient {
	mock := &Mockclient{ctrl: ctrl}
	mock.recorder = &MockclientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockclient) EXPECT() *MockclientMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *Mockclient) Auth() *auth.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth")
	ret0, _ := ret[0].(*auth.Client)
	return ret0
}

// Auth indicates an expected call of Auth.
func (mr *MockclientMockRecorder) Auth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*Mockclient)(nil).Auth))
}

// Run mocks base method.
func (m *Mockclient) Run(ctx context.Context, f func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockclientMockRecorder) Run(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*Mockclient)(nil).Run), ctx, f)
}

// MockauthChecker is a mock of authChecker interface.
type MockauthChecker struct {
	ctrl     *gomock.Controller
	recorder *MockauthCheckerMockRecorder
}

// MockauthCheckerMockRecorder is the mock recorder for MockauthChecker.
type MockauthCheckerMockRecorder struct {
	mock *MockauthChecker
}

// NewMockauthChecker creates a new mock instance.
func NewMockauthChecker(ctrl *gomock.Controller) *MockauthChecker {
	mock := &MockauthChecker{ctrl: ctrl}
	mock.recorder = &MockauthCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockauthChecker) EXPECT() *MockauthCheckerMockRecorder {
	return m.recorder
}

// CheckAuth mocks base method.
func (m *MockauthChecker) CheckAuth(ctx context.Context, client client) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAuth", ctx, client)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAuth indicates an expected call of CheckAuth.
func (mr *MockauthCheckerMockRecorder) CheckAuth(ctx, client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAuth", reflect.TypeOf((*MockauthChecker)(nil).CheckAuth), ctx, client)
}

// MocktgAuthInterface is a mock of tgAuthInterface interface.
type MocktgAuthInterface struct {
	ctrl     *gomock.Controller
	recorder *MocktgAuthInterfaceMockRecorder
}

// MocktgAuthInterfaceMockRecorder is the mock recorder for MocktgAuthInterface.
type MocktgAuthInterfaceMockRecorder struct {
	mock *MocktgAuthInterface
}

// NewMocktgAuthInterface creates a new mock instance.
func NewMocktgAuthInterface(ctrl *gomock.Controller) *MocktgAuthInterface {
	mock := &MocktgAuthInterface{ctrl: ctrl}
	mock.recorder = &MocktgAuthInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktgAuthInterface) EXPECT() *MocktgAuthInterfaceMockRecorder {
	return m.recorder
}

// Status mocks base method.
func (m *MocktgAuthInterface) Status(ctx context.Context) (*auth.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", ctx)
	ret0, _ := ret[0].(*auth.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MocktgAuthInterfaceMockRecorder) Status(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MocktgAuthInterface)(nil).Status), ctx)
}

// MockstatusChecker is a mock of statusChecker interface.
type MockstatusChecker struct {
	ctrl     *gomock.Controller
	recorder *MockstatusCheckerMockRecorder
}

// MockstatusCheckerMockRecorder is the mock recorder for MockstatusChecker.
type MockstatusCheckerMockRecorder struct {
	mock *MockstatusChecker
}

// NewMockstatusChecker creates a new mock instance.
func NewMockstatusChecker(ctrl *gomock.Controller) *MockstatusChecker {
	mock := &MockstatusChecker{ctrl: ctrl}
	mock.recorder = &MockstatusCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockstatusChecker) EXPECT() *MockstatusCheckerMockRecorder {
	return m.recorder
}

// CheckAuth mocks base method.
func (m *MockstatusChecker) CheckAuth(ctx context.Context, auth tgAuthInterface) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAuth", ctx, auth)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAuth indicates an expected call of CheckAuth.
func (mr *MockstatusCheckerMockRecorder) CheckAuth(ctx, auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAuth", reflect.TypeOf((*MockstatusChecker)(nil).CheckAuth), ctx, auth)
}

// MocktelegramFactory is a mock of telegramFactory interface.
type MocktelegramFactory struct {
	ctrl     *gomock.Controller
	recorder *MocktelegramFactoryMockRecorder
}

// MocktelegramFactoryMockRecorder is the mock recorder for MocktelegramFactory.
type MocktelegramFactoryMockRecorder struct {
	mock *MocktelegramFactory
}

// NewMocktelegramFactory creates a new mock instance.
func NewMocktelegramFactory(ctrl *gomock.Controller) *MocktelegramFactory {
	mock := &MocktelegramFactory{ctrl: ctrl}
	mock.recorder = &MocktelegramFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktelegramFactory) EXPECT() *MocktelegramFactoryMockRecorder {
	return m.recorder
}

// GetClient mocks base method.
func (m *MocktelegramFactory) GetClient() (*telegram.TGClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(*telegram.TGClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClient indicates an expected call of GetClient.
func (mr *MocktelegramFactoryMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MocktelegramFactory)(nil).GetClient))
}

// MocktgFactoryInterface is a mock of tgFactoryInterface interface.
type MocktgFactoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MocktgFactoryInterfaceMockRecorder
}

// MocktgFactoryInterfaceMockRecorder is the mock recorder for MocktgFactoryInterface.
type MocktgFactoryInterfaceMockRecorder struct {
	mock *MocktgFactoryInterface
}

// NewMocktgFactoryInterface creates a new mock instance.
func NewMocktgFactoryInterface(ctrl *gomock.Controller) *MocktgFactoryInterface {
	mock := &MocktgFactoryInterface{ctrl: ctrl}
	mock.recorder = &MocktgFactoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktgFactoryInterface) EXPECT() *MocktgFactoryInterfaceMockRecorder {
	return m.recorder
}

// GetClient mocks base method.
func (m *MocktgFactoryInterface) GetClient() (client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClient indicates an expected call of GetClient.
func (mr *MocktgFactoryInterfaceMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MocktgFactoryInterface)(nil).GetClient))
}

// MockChecker is a mock of Checker interface.
type MockChecker struct {
	ctrl     *gomock.Controller
	recorder *MockCheckerMockRecorder
}

// MockCheckerMockRecorder is the mock recorder for MockChecker.
type MockCheckerMockRecorder struct {
	mock *MockChecker
}

// NewMockChecker creates a new mock instance.
func NewMockChecker(ctrl *gomock.Controller) *MockChecker {
	mock := &MockChecker{ctrl: ctrl}
	mock.recorder = &MockCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChecker) EXPECT() *MockCheckerMockRecorder {
	return m.recorder
}

// CheckAuth mocks base method.
func (m *MockChecker) CheckAuth(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAuth", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAuth indicates an expected call of CheckAuth.
func (mr *MockCheckerMockRecorder) CheckAuth(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAuth", reflect.TypeOf((*MockChecker)(nil).CheckAuth), ctx)
}
