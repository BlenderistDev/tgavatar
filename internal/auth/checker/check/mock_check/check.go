// Code generated by MockGen. DO NOT EDIT.
// Source: check.go

// Package mock_check is a generated GoMock package.
package mock_check

import (
	context "context"
	reflect "reflect"
	check "tgavatar/internal/auth/checker/check"

	gomock "github.com/golang/mock/gomock"
	auth "github.com/gotd/td/telegram/auth"
)

// client is a mock of client interface.
type client struct {
	ctrl     *gomock.Controller
	recorder *clientMockRecorder
}

// clientMockRecorder is the mock recorder for client.
type clientMockRecorder struct {
	mock *client
}

// Newclient creates a new mock instance.
func Newclient(ctrl *gomock.Controller) *client {
	mock := &client{ctrl: ctrl}
	mock.recorder = &clientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *client) EXPECT() *clientMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *client) Auth() *auth.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth")
	ret0, _ := ret[0].(*auth.Client)
	return ret0
}

// Auth indicates an expected call of Auth.
func (mr *clientMockRecorder) Auth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*client)(nil).Auth))
}

// MockCheckerAuth is a mock of CheckerAuth interface.
type MockCheckerAuth struct {
	ctrl     *gomock.Controller
	recorder *MockCheckerAuthMockRecorder
}

// MockCheckerAuthMockRecorder is the mock recorder for MockCheckerAuth.
type MockCheckerAuthMockRecorder struct {
	mock *MockCheckerAuth
}

// NewMockCheckerAuth creates a new mock instance.
func NewMockCheckerAuth(ctrl *gomock.Controller) *MockCheckerAuth {
	mock := &MockCheckerAuth{ctrl: ctrl}
	mock.recorder = &MockCheckerAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckerAuth) EXPECT() *MockCheckerAuthMockRecorder {
	return m.recorder
}

// CheckAuth mocks base method.
func (m *MockCheckerAuth) CheckAuth(ctx context.Context, client client) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAuth", ctx, client)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAuth indicates an expected call of CheckAuth.
func (mr *MockCheckerAuthMockRecorder) CheckAuth(ctx, client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAuth", reflect.TypeOf((*MockCheckerAuth)(nil).CheckAuth), ctx, client)
}

// MockTgAuthInterface is a mock of TgAuthInterface interface.
type MockTgAuthInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTgAuthInterfaceMockRecorder
}

// MockTgAuthInterfaceMockRecorder is the mock recorder for MockTgAuthInterface.
type MockTgAuthInterfaceMockRecorder struct {
	mock *MockTgAuthInterface
}

// NewMockTgAuthInterface creates a new mock instance.
func NewMockTgAuthInterface(ctrl *gomock.Controller) *MockTgAuthInterface {
	mock := &MockTgAuthInterface{ctrl: ctrl}
	mock.recorder = &MockTgAuthInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTgAuthInterface) EXPECT() *MockTgAuthInterfaceMockRecorder {
	return m.recorder
}

// Status mocks base method.
func (m *MockTgAuthInterface) Status(ctx context.Context) (*auth.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", ctx)
	ret0, _ := ret[0].(*auth.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockTgAuthInterfaceMockRecorder) Status(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockTgAuthInterface)(nil).Status), ctx)
}

// MockCheckerAuthStatusInterface is a mock of CheckerAuthStatusInterface interface.
type MockCheckerAuthStatusInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCheckerAuthStatusInterfaceMockRecorder
}

// MockCheckerAuthStatusInterfaceMockRecorder is the mock recorder for MockCheckerAuthStatusInterface.
type MockCheckerAuthStatusInterfaceMockRecorder struct {
	mock *MockCheckerAuthStatusInterface
}

// NewMockCheckerAuthStatusInterface creates a new mock instance.
func NewMockCheckerAuthStatusInterface(ctrl *gomock.Controller) *MockCheckerAuthStatusInterface {
	mock := &MockCheckerAuthStatusInterface{ctrl: ctrl}
	mock.recorder = &MockCheckerAuthStatusInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckerAuthStatusInterface) EXPECT() *MockCheckerAuthStatusInterfaceMockRecorder {
	return m.recorder
}

// CheckAuth mocks base method.
func (m *MockCheckerAuthStatusInterface) CheckAuth(ctx context.Context, auth check.TgAuthInterface) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAuth", ctx, auth)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAuth indicates an expected call of CheckAuth.
func (mr *MockCheckerAuthStatusInterfaceMockRecorder) CheckAuth(ctx, auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAuth", reflect.TypeOf((*MockCheckerAuthStatusInterface)(nil).CheckAuth), ctx, auth)
}
