// Code generated by MockGen. DO NOT EDIT.
// Source: check.go

// Package mock_check is a generated GoMock package.
package mock_check

import (
	context "context"
	reflect "reflect"
	checker "tgavatar/internal/auth/checker"
	telegram "tgavatar/internal/telegram"

	gomock "github.com/golang/mock/gomock"
	auth "github.com/gotd/td/telegram/auth"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockClient) Auth() *auth.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth")
	ret0, _ := ret[0].(*auth.Client)
	return ret0
}

// Auth indicates an expected call of Auth.
func (mr *MockClientMockRecorder) Auth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockClient)(nil).Auth))
}

// Run mocks base method.
func (m *MockClient) Run(ctx context.Context, f func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockClientMockRecorder) Run(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockClient)(nil).Run), ctx, f)
}

// MockCheckerAuth is a mock of CheckerAuth interface.
type MockCheckerAuth struct {
	ctrl     *gomock.Controller
	recorder *MockCheckerAuthMockRecorder
}

// MockCheckerAuthMockRecorder is the mock recorder for MockCheckerAuth.
type MockCheckerAuthMockRecorder struct {
	mock *MockCheckerAuth
}

// NewMockCheckerAuth creates a new mock instance.
func NewMockCheckerAuth(ctrl *gomock.Controller) *MockCheckerAuth {
	mock := &MockCheckerAuth{ctrl: ctrl}
	mock.recorder = &MockCheckerAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckerAuth) EXPECT() *MockCheckerAuthMockRecorder {
	return m.recorder
}

// CheckAuth mocks base method.
func (m *MockCheckerAuth) CheckAuth(ctx context.Context, client checker.Client) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAuth", ctx, client)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAuth indicates an expected call of CheckAuth.
func (mr *MockCheckerAuthMockRecorder) CheckAuth(ctx, client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAuth", reflect.TypeOf((*MockCheckerAuth)(nil).CheckAuth), ctx, client)
}

// MockTgAuthInterface is a mock of TgAuthInterface interface.
type MockTgAuthInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTgAuthInterfaceMockRecorder
}

// MockTgAuthInterfaceMockRecorder is the mock recorder for MockTgAuthInterface.
type MockTgAuthInterfaceMockRecorder struct {
	mock *MockTgAuthInterface
}

// NewMockTgAuthInterface creates a new mock instance.
func NewMockTgAuthInterface(ctrl *gomock.Controller) *MockTgAuthInterface {
	mock := &MockTgAuthInterface{ctrl: ctrl}
	mock.recorder = &MockTgAuthInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTgAuthInterface) EXPECT() *MockTgAuthInterfaceMockRecorder {
	return m.recorder
}

// Status mocks base method.
func (m *MockTgAuthInterface) Status(ctx context.Context) (*auth.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", ctx)
	ret0, _ := ret[0].(*auth.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockTgAuthInterfaceMockRecorder) Status(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockTgAuthInterface)(nil).Status), ctx)
}

// MockCheckerAuthStatusInterface is a mock of CheckerAuthStatusInterface interface.
type MockCheckerAuthStatusInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCheckerAuthStatusInterfaceMockRecorder
}

// MockCheckerAuthStatusInterfaceMockRecorder is the mock recorder for MockCheckerAuthStatusInterface.
type MockCheckerAuthStatusInterfaceMockRecorder struct {
	mock *MockCheckerAuthStatusInterface
}

// NewMockCheckerAuthStatusInterface creates a new mock instance.
func NewMockCheckerAuthStatusInterface(ctrl *gomock.Controller) *MockCheckerAuthStatusInterface {
	mock := &MockCheckerAuthStatusInterface{ctrl: ctrl}
	mock.recorder = &MockCheckerAuthStatusInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckerAuthStatusInterface) EXPECT() *MockCheckerAuthStatusInterfaceMockRecorder {
	return m.recorder
}

// CheckAuth mocks base method.
func (m *MockCheckerAuthStatusInterface) CheckAuth(ctx context.Context, auth checker.TgAuthInterface) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAuth", ctx, auth)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAuth indicates an expected call of CheckAuth.
func (mr *MockCheckerAuthStatusInterfaceMockRecorder) CheckAuth(ctx, auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAuth", reflect.TypeOf((*MockCheckerAuthStatusInterface)(nil).CheckAuth), ctx, auth)
}

// MocktelegramFactory is a mock of telegramFactory interface.
type MocktelegramFactory struct {
	ctrl     *gomock.Controller
	recorder *MocktelegramFactoryMockRecorder
}

// MocktelegramFactoryMockRecorder is the mock recorder for MocktelegramFactory.
type MocktelegramFactoryMockRecorder struct {
	mock *MocktelegramFactory
}

// NewMocktelegramFactory creates a new mock instance.
func NewMocktelegramFactory(ctrl *gomock.Controller) *MocktelegramFactory {
	mock := &MocktelegramFactory{ctrl: ctrl}
	mock.recorder = &MocktelegramFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktelegramFactory) EXPECT() *MocktelegramFactoryMockRecorder {
	return m.recorder
}

// GetClient mocks base method.
func (m *MocktelegramFactory) GetClient() (*telegram.TGClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(*telegram.TGClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClient indicates an expected call of GetClient.
func (mr *MocktelegramFactoryMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MocktelegramFactory)(nil).GetClient))
}

// MockTgFactoryInterface is a mock of TgFactoryInterface interface.
type MockTgFactoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTgFactoryInterfaceMockRecorder
}

// MockTgFactoryInterfaceMockRecorder is the mock recorder for MockTgFactoryInterface.
type MockTgFactoryInterfaceMockRecorder struct {
	mock *MockTgFactoryInterface
}

// NewMockTgFactoryInterface creates a new mock instance.
func NewMockTgFactoryInterface(ctrl *gomock.Controller) *MockTgFactoryInterface {
	mock := &MockTgFactoryInterface{ctrl: ctrl}
	mock.recorder = &MockTgFactoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTgFactoryInterface) EXPECT() *MockTgFactoryInterfaceMockRecorder {
	return m.recorder
}

// GetClient mocks base method.
func (m *MockTgFactoryInterface) GetClient() (checker.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(checker.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClient indicates an expected call of GetClient.
func (mr *MockTgFactoryInterfaceMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockTgFactoryInterface)(nil).GetClient))
}

// MockChecker is a mock of Checker interface.
type MockChecker struct {
	ctrl     *gomock.Controller
	recorder *MockCheckerMockRecorder
}

// MockCheckerMockRecorder is the mock recorder for MockChecker.
type MockCheckerMockRecorder struct {
	mock *MockChecker
}

// NewMockChecker creates a new mock instance.
func NewMockChecker(ctrl *gomock.Controller) *MockChecker {
	mock := &MockChecker{ctrl: ctrl}
	mock.recorder = &MockCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChecker) EXPECT() *MockCheckerMockRecorder {
	return m.recorder
}

// CheckAuth mocks base method.
func (m *MockChecker) CheckAuth(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAuth", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAuth indicates an expected call of CheckAuth.
func (mr *MockCheckerMockRecorder) CheckAuth(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAuth", reflect.TypeOf((*MockChecker)(nil).CheckAuth), ctx)
}
