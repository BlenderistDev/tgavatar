// Code generated by MockGen. DO NOT EDIT.
// Source: upload.go

// Package mock_upload is a generated GoMock package.
package mock_upload

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	tg "github.com/gotd/td/tg"
)

// Mocklog is a mock of log interface.
type Mocklog struct {
	ctrl     *gomock.Controller
	recorder *MocklogMockRecorder
}

// MocklogMockRecorder is the mock recorder for Mocklog.
type MocklogMockRecorder struct {
	mock *Mocklog
}

// NewMocklog creates a new mock instance.
func NewMocklog(ctrl *gomock.Controller) *Mocklog {
	mock := &Mocklog{ctrl: ctrl}
	mock.recorder = &MocklogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocklog) EXPECT() *MocklogMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *Mocklog) Error(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MocklogMockRecorder) Error(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*Mocklog)(nil).Error), args...)
}

// Info mocks base method.
func (m *Mocklog) Info(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MocklogMockRecorder) Info(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*Mocklog)(nil).Info), args...)
}

// MocktgClient is a mock of tgClient interface.
type MocktgClient struct {
	ctrl     *gomock.Controller
	recorder *MocktgClientMockRecorder
}

// MocktgClientMockRecorder is the mock recorder for MocktgClient.
type MocktgClientMockRecorder struct {
	mock *MocktgClient
}

// NewMocktgClient creates a new mock instance.
func NewMocktgClient(ctrl *gomock.Controller) *MocktgClient {
	mock := &MocktgClient{ctrl: ctrl}
	mock.recorder = &MocktgClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktgClient) EXPECT() *MocktgClientMockRecorder {
	return m.recorder
}

// PhotosDeletePhotos mocks base method.
func (m *MocktgClient) PhotosDeletePhotos(ctx context.Context, id []tg.InputPhotoClass) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PhotosDeletePhotos", ctx, id)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PhotosDeletePhotos indicates an expected call of PhotosDeletePhotos.
func (mr *MocktgClientMockRecorder) PhotosDeletePhotos(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PhotosDeletePhotos", reflect.TypeOf((*MocktgClient)(nil).PhotosDeletePhotos), ctx, id)
}

// PhotosGetUserPhotos mocks base method.
func (m *MocktgClient) PhotosGetUserPhotos(ctx context.Context, request *tg.PhotosGetUserPhotosRequest) (tg.PhotosPhotosClass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PhotosGetUserPhotos", ctx, request)
	ret0, _ := ret[0].(tg.PhotosPhotosClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PhotosGetUserPhotos indicates an expected call of PhotosGetUserPhotos.
func (mr *MocktgClientMockRecorder) PhotosGetUserPhotos(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PhotosGetUserPhotos", reflect.TypeOf((*MocktgClient)(nil).PhotosGetUserPhotos), ctx, request)
}

// PhotosUploadProfilePhoto mocks base method.
func (m *MocktgClient) PhotosUploadProfilePhoto(ctx context.Context, request *tg.PhotosUploadProfilePhotoRequest) (*tg.PhotosPhoto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PhotosUploadProfilePhoto", ctx, request)
	ret0, _ := ret[0].(*tg.PhotosPhoto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PhotosUploadProfilePhoto indicates an expected call of PhotosUploadProfilePhoto.
func (mr *MocktgClientMockRecorder) PhotosUploadProfilePhoto(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PhotosUploadProfilePhoto", reflect.TypeOf((*MocktgClient)(nil).PhotosUploadProfilePhoto), ctx, request)
}

// Mockloader is a mock of loader interface.
type Mockloader struct {
	ctrl     *gomock.Controller
	recorder *MockloaderMockRecorder
}

// MockloaderMockRecorder is the mock recorder for Mockloader.
type MockloaderMockRecorder struct {
	mock *Mockloader
}

// NewMockloader creates a new mock instance.
func NewMockloader(ctrl *gomock.Controller) *Mockloader {
	mock := &Mockloader{ctrl: ctrl}
	mock.recorder = &MockloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockloader) EXPECT() *MockloaderMockRecorder {
	return m.recorder
}

// FromBytes mocks base method.
func (m *Mockloader) FromBytes(ctx context.Context, name string, b []byte) (tg.InputFileClass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromBytes", ctx, name, b)
	ret0, _ := ret[0].(tg.InputFileClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FromBytes indicates an expected call of FromBytes.
func (mr *MockloaderMockRecorder) FromBytes(ctx, name, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromBytes", reflect.TypeOf((*Mockloader)(nil).FromBytes), ctx, name, b)
}

// MockUpload is a mock of Upload interface.
type MockUpload struct {
	ctrl     *gomock.Controller
	recorder *MockUploadMockRecorder
}

// MockUploadMockRecorder is the mock recorder for MockUpload.
type MockUploadMockRecorder struct {
	mock *MockUpload
}

// NewMockUpload creates a new mock instance.
func NewMockUpload(ctrl *gomock.Controller) *MockUpload {
	mock := &MockUpload{ctrl: ctrl}
	mock.recorder = &MockUploadMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpload) EXPECT() *MockUploadMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockUpload) Start(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", ctx)
}

// Start indicates an expected call of Start.
func (mr *MockUploadMockRecorder) Start(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockUpload)(nil).Start), ctx)
}
