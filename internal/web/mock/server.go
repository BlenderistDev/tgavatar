// Code generated by MockGen. DO NOT EDIT.
// Source: server.go

// Package mock_server is a generated GoMock package.
package mock_server

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// Mocklog is a mock of log interface.
type Mocklog struct {
	ctrl     *gomock.Controller
	recorder *MocklogMockRecorder
}

// MocklogMockRecorder is the mock recorder for Mocklog.
type MocklogMockRecorder struct {
	mock *Mocklog
}

// NewMocklog creates a new mock instance.
func NewMocklog(ctrl *gomock.Controller) *Mocklog {
	mock := &Mocklog{ctrl: ctrl}
	mock.recorder = &MocklogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocklog) EXPECT() *MocklogMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *Mocklog) Error(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MocklogMockRecorder) Error(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*Mocklog)(nil).Error), args...)
}

// Info mocks base method.
func (m *Mocklog) Info(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MocklogMockRecorder) Info(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*Mocklog)(nil).Info), args...)
}

// MockauthChecker is a mock of authChecker interface.
type MockauthChecker struct {
	ctrl     *gomock.Controller
	recorder *MockauthCheckerMockRecorder
}

// MockauthCheckerMockRecorder is the mock recorder for MockauthChecker.
type MockauthCheckerMockRecorder struct {
	mock *MockauthChecker
}

// NewMockauthChecker creates a new mock instance.
func NewMockauthChecker(ctrl *gomock.Controller) *MockauthChecker {
	mock := &MockauthChecker{ctrl: ctrl}
	mock.recorder = &MockauthCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockauthChecker) EXPECT() *MockauthCheckerMockRecorder {
	return m.recorder
}

// CheckAuth mocks base method.
func (m *MockauthChecker) CheckAuth(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "checkAuth", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAuth indicates an expected call of CheckAuth.
func (mr *MockauthCheckerMockRecorder) CheckAuth(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "checkAuth", reflect.TypeOf((*MockauthChecker)(nil).CheckAuth), ctx)
}

// Mockauthorizer is a mock of authorizer interface.
type Mockauthorizer struct {
	ctrl     *gomock.Controller
	recorder *MockauthorizerMockRecorder
}

// MockauthorizerMockRecorder is the mock recorder for Mockauthorizer.
type MockauthorizerMockRecorder struct {
	mock *Mockauthorizer
}

// NewMockauthorizer creates a new mock instance.
func NewMockauthorizer(ctrl *gomock.Controller) *Mockauthorizer {
	mock := &Mockauthorizer{ctrl: ctrl}
	mock.recorder = &MockauthorizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockauthorizer) EXPECT() *MockauthorizerMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *Mockauthorizer) Auth(phone string, codeChan chan string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", phone, codeChan)
	ret0, _ := ret[0].(error)
	return ret0
}

// Auth indicates an expected call of Auth.
func (mr *MockauthorizerMockRecorder) Auth(phone, codeChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*Mockauthorizer)(nil).Auth), phone, codeChan)
}
